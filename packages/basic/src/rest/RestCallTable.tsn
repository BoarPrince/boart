import { ExecutionContext } from '../../common/execution/ExecutionContext';
import { ExecutionEngine } from '../../common/execution/ExecutionEngine';
import { ExecutionUnit } from '../../common/execution/ExecutionUnit';
import { GroupRowDefinition } from '../../common/table/GroupRowDefinition';
import { RowDefinition } from '../../common/table/RowDefinition';
import { TableHandler } from '../../common/table/TableHandler';
import { TableRowType } from '../../common/table/TableRowType';
import { XORValidator } from '../../common/table/Validators/XORValidator';
import { DataContent } from '../../data/DataContent';
import { RestCallContext } from '../RestCallContext';
import { RowTypeValue } from '../RowTypeValue';

/**
 *
 */
interface DataExecutionContext {
    data: DataContent;
    header: object;
}

/**
 *
 */
// eslint-disable-next-line @typescript-eslint/no-explicit-any
export type DataContext = ExecutionContext<object, object, DataExecutionContext>;

/**
 *
 */
class RestCallExecutinoUnit implements ExecutionUnit<RestCallContext, RowTypeValue<RestCallContext>> {
    /**
     *
     */
    description = () => 'hallo';

    /**
     *
     */
    execute(context: RestCallContext, row: RowTypeValue<RestCallContext>): void {
        console.log(context, row);
    }
}

/**
 *
 */
export class ExpectedDataExecutinoUnit implements ExecutionUnit<DataContext, RowTypeValue<DataContext>> {
    description: () => 'Expected:Data';

    execute(context: DataContext, row: RowTypeValue<DataContext>): void {
        const expected = row.value().toString();
        if (!row.actionPara) {
            const value = context.execution.data.getText();
            if (expected !== value) {
                throw Error(`${this.description()}: 
                expected: ${expected}
                actual: ${value}`);
            }
        }
        // else {
        //     const value = context.execution.data.get(row.actionPara());
        // }
    }
}

/**
 *
 */
class RestCallExecutionEngine extends ExecutionEngine<RestCallContext, RowTypeValue<RestCallContext>> {
    /**
     *
     */
    constructor() {
        super(new RestCallExecutinoUnit(), RestCallExecutionEngine.initializer());
    }

    /**
     *
     */
    private static initializer(): () => RestCallContext {
        return (): RestCallContext => ({
            config: {
                value: ''
            },
            preExecution: {
                value: ''
            },
            execution: {
                data: null,
                header: null
            }
        });
    }
}

const groupRowDefinition = new GroupRowDefinition<RestCallContext, RowTypeValue<RestCallContext>>('xxx');
groupRowDefinition.rowDefinitions.push(
    new RowDefinition({
        key: Symbol('expected:header'),
        type: TableRowType.PostProcessing,
        executionUnit: new RestCallExecutinoUnit(),
        validators: null
    }),
    new RowDefinition({
        key: Symbol('expected:data'),
        type: TableRowType.PostProcessing,
        executionUnit: new RestCallExecutinoUnit(),
        validators: null
    }),
    new RowDefinition({
        key: Symbol('expected:data:contains'),
        type: TableRowType.PostProcessing,
        executionUnit: new RestCallExecutinoUnit(),
        validators: null
    }),
    new RowDefinition({
        key: Symbol('expected:data:contains:not'),
        type: TableRowType.PostProcessing,
        executionUnit: new RestCallExecutinoUnit(),
        validators: null
    }),
    new RowDefinition({
        key: Symbol('expected:data:count'),
        type: TableRowType.PostProcessing,
        executionUnit: new RestCallExecutinoUnit(),
        validators: null
    }),
    new RowDefinition({
        key: Symbol('exptected:jsonLogic:true'),
        type: TableRowType.PostProcessing,
        executionUnit: new RestCallExecutinoUnit(),
        validators: null
    }),
    new RowDefinition({
        key: Symbol('exptected:jsonLogic:false'),
        type: TableRowType.PostProcessing,
        executionUnit: new RestCallExecutinoUnit(),
        validators: null
    }),
    new RowDefinition({
        key: Symbol('transform:jsonLogic'),
        type: TableRowType.PostProcessing,
        executionUnit: new RestCallExecutinoUnit(),
        validators: null
    }),
    new RowDefinition({
        key: Symbol('transform:jpath'),
        type: TableRowType.PostProcessing,
        executionUnit: new RestCallExecutinoUnit(),
        validators: null
    }),
    new RowDefinition({
        key: Symbol('description'),
        type: TableRowType.PostProcessing,
        executionUnit: new RestCallExecutinoUnit(),
        validators: null
    }),
    new RowDefinition({
        key: Symbol('save'),
        type: TableRowType.PostProcessing,
        executionUnit: new RestCallExecutinoUnit(),
        validators: null
    }),
    new RowDefinition({
        key: Symbol('save:global'),
        type: TableRowType.PostProcessing,
        executionUnit: new RestCallExecutinoUnit(),
        validators: null
    })
);

groupRowDefinition.validations.push(new XORValidator(null));

const tableHandler = new TableHandler(RowTypeValue, new RestCallExecutionEngine());
tableHandler.addGroupRowDefinition(groupRowDefinition);

tableHandler.process({
    headers: {
        cells: ['my-action', 'my-value']
    },
    rows: [
        {
            cells: ['a', 'b']
        }
    ]
});
