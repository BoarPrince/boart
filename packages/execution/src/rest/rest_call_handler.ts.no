import fs from 'fs';

import { EnvLoader } from '@boart/core';

import { StepReportHelper } from '../report/report_helper';

/**
 *
 */
interface RestCallInfo {
    url: string;
    path: string;
    id: string;
    method: string;
    startTime: Date;
    endTime: Date;
    status: string;
    duration: number;
    traceId: string;
    headers: [];
    requestBody: object;
    response: object;
    responseType: string;
}

/**
 *
 */
interface RestCallRequestInfo {
    headers: [];
    requestBody: any;
}

/**
 *
 */
interface RestCallResponseInfo {
    status: string;
    response: any;
    responseType: string;
}

/**
 *
 */
interface RestCallEntry {
    id: string;
    url: string;
    query: string;
    path: string;
    traceId: string;
    method: string;
    startTime: Date;
    endTime: Date;
    duration: number;
    response: RestCallResponseInfo;
    request: RestCallRequestInfo;
}

/**
 *
 */
export class RestCallHandler {
    private _restCalls: Map<string, RestCallEntry>;
    private static STORE_NAME = '###rest_call_handler###';

    /**
     *
     */
    private constructor() {
        this._restCalls = new Map<string, RestCallEntry>();
    }

    /**
     *
     */
    public static get instance(): RestCallHandler {
        // let restCallHandler = gauge.dataStore.specStore.get(RestCallHandler.STORE_NAME);
        // if (!restCallHandler) {
        //     restCallHandler = new RestCallHandler();
        //     gauge.dataStore.specStore.put(RestCallHandler.STORE_NAME, restCallHandler);
        // }
        // return restCallHandler;
        return null;
    }

    /**
     *
     */
    public addRequest(id: string, info: RestCallInfo) {
        const url = (() => {
            try {
                return new URL(info.url);
            } catch (error) {
                return {
                    origin: info.url,
                    pathname: '',
                    search: ''
                };
            }
        })();

        const data: RestCallEntry = {
            id,
            url: url.origin + url.pathname,
            query: url.search,
            path: null,
            traceId: null,
            method: info.method,
            request: {
                headers: info.headers,
                requestBody: info.requestBody
            },
            response: null,
            startTime: info.startTime,
            endTime: null,
            duration: null
        };
        this._restCalls.set(id, data);

        const reportInfo = StepReportHelper.instance.getLastInputDetail('ui-action');
        reportInfo.restCalls?.push(RestCallHandler.getFilename(data));
    }

    /**
     *
     */
    public addRespone(id: string, info: RestCallInfo) {
        const entry = this._restCalls.get(id);
        if (!entry) {
            return;
        }
        entry.endTime = info.endTime;
        entry.path = info.path;
        entry.traceId = info.traceId;
        entry.duration = info.duration;
        entry.response = {
            status: info.status,
            response: info.response,
            responseType: info.responseType
        };
        this.report(entry);
        this._restCalls.delete(id);
    }

    /**
     *
     */
    private report(entry: RestCallEntry): void {
        // data output
        fs.writeFile(RestCallHandler.getFilename(entry), JSON.stringify(entry), 'utf-8', (writeErr) => {
            if (writeErr) return console.log(writeErr);
        });
    }

    /**
     *
     * @param entry
     * @returns
     */
    private static getFilename(entry: RestCallEntry): string {
        return EnvLoader.mapReportData(`${entry.id}.json`);
    }
}
