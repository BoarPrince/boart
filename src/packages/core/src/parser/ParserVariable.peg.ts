/* AutoGenerated Code, changes may be overwritten
* INPUT GRAMMAR:
* startx := '\$\{\s*' name=NameToken scope={'\s*\+\s*' value=NameToken}? qualifiers={'\s*:\s*' value=IdentifierToken}* '\s*#\s*' selectors={def=Selector '\s*.\s*'?}*
*         | '\$\{\s*' name=NameToken scope={'\s*\+\s*' value=NameToken}? qualifiers={'\s*:\s*' value=IdentifierToken}*
* //# -------------------------------------------------------
* //# Selector
* //# -------------------------------------------------------
* Selector := SelectorWithSimpleIndex 
*         | SelectorWithFirstIndex 
*         | SelectorWithEndIndex 
*         | SelectorWithStartEndIndex 
*         | SelectorWithWithRandomIndex 
*         | SelectorWithWildcard 
*         | SelectorWithIndexList 
*         | SelectorSimple
* SelectorSimple := value=SelectorToken
* SelectorWithSimpleIndex := value=SelectorToken '\s*\[\s*' index=IndexToken '\s*\]\s*'
* SelectorWithFirstIndex := value=SelectorToken '\s*\[\s*:\s*' index=IndexToken '\s*\]\s*'
* SelectorWithEndIndex := value=SelectorToken '\s*\[\s*-\s*' index=IndexToken '\s*:\s*\]\s*'
* SelectorWithStartEndIndex := value=SelectorToken '\s*\[\s*' startIndex=IndexToken '\s*:\s*' endIndex=IndexToken? '\s*:\s*\]\s*'
* SelectorWithIndexList := value=SelectorToken '\s*\[\s*' index=IndexToken list={'\s*,\s*' index=IndexToken }* '\s*\]\s*'
* SelectorWithWildcard := value=SelectorToken '\s*\[\s*\*\s*\]\s*'
* SelectorWithWithRandomIndex := value=SelectorToken '\s*\[\s*' count='[0-9]+'? '\s*\?\s*\]'
* //# -------------------------------------------------------
* //# Token
* //# -------------------------------------------------------
* NameToken := '[^#&@$\{\}:.+\[\] \t\n]+'
* IdentifierToken := '[^#:$\{\}\[\] \t\n]+'
* SelectorToken := '[^#$\{\}:.+\[\] \t\n]+'
* IndexToken := '[0-9]+'
*/
type Nullable<T> = T | null;
type $$RuleType<T> = () => Nullable<T>;
export interface ASTNodeIntf {
    kind: ASTKinds;
}
export enum ASTKinds {
    startx_1 = "startx_1",
    startx_2 = "startx_2",
    startx_$0 = "startx_$0",
    startx_$1 = "startx_$1",
    startx_$2 = "startx_$2",
    startx_$3 = "startx_$3",
    startx_$4 = "startx_$4",
    Selector_1 = "Selector_1",
    Selector_2 = "Selector_2",
    Selector_3 = "Selector_3",
    Selector_4 = "Selector_4",
    Selector_5 = "Selector_5",
    Selector_6 = "Selector_6",
    Selector_7 = "Selector_7",
    Selector_8 = "Selector_8",
    SelectorSimple = "SelectorSimple",
    SelectorWithSimpleIndex = "SelectorWithSimpleIndex",
    SelectorWithFirstIndex = "SelectorWithFirstIndex",
    SelectorWithEndIndex = "SelectorWithEndIndex",
    SelectorWithStartEndIndex = "SelectorWithStartEndIndex",
    SelectorWithIndexList = "SelectorWithIndexList",
    SelectorWithIndexList_$0 = "SelectorWithIndexList_$0",
    SelectorWithWildcard = "SelectorWithWildcard",
    SelectorWithWithRandomIndex = "SelectorWithWithRandomIndex",
    NameToken = "NameToken",
    IdentifierToken = "IdentifierToken",
    SelectorToken = "SelectorToken",
    IndexToken = "IndexToken",
}
export type startx = startx_1 | startx_2;
export interface startx_1 {
    kind: ASTKinds.startx_1;
    name: NameToken;
    scope: Nullable<startx_$0>;
    qualifiers: startx_$1[];
    selectors: startx_$2[];
}
export interface startx_2 {
    kind: ASTKinds.startx_2;
    name: NameToken;
    scope: Nullable<startx_$3>;
    qualifiers: startx_$4[];
}
export interface startx_$0 {
    kind: ASTKinds.startx_$0;
    value: NameToken;
}
export interface startx_$1 {
    kind: ASTKinds.startx_$1;
    value: IdentifierToken;
}
export interface startx_$2 {
    kind: ASTKinds.startx_$2;
    def: Selector;
}
export interface startx_$3 {
    kind: ASTKinds.startx_$3;
    value: NameToken;
}
export interface startx_$4 {
    kind: ASTKinds.startx_$4;
    value: IdentifierToken;
}
export type Selector = Selector_1 | Selector_2 | Selector_3 | Selector_4 | Selector_5 | Selector_6 | Selector_7 | Selector_8;
export type Selector_1 = SelectorWithSimpleIndex;
export type Selector_2 = SelectorWithFirstIndex;
export type Selector_3 = SelectorWithEndIndex;
export type Selector_4 = SelectorWithStartEndIndex;
export type Selector_5 = SelectorWithWithRandomIndex;
export type Selector_6 = SelectorWithWildcard;
export type Selector_7 = SelectorWithIndexList;
export type Selector_8 = SelectorSimple;
export interface SelectorSimple {
    kind: ASTKinds.SelectorSimple;
    value: SelectorToken;
}
export interface SelectorWithSimpleIndex {
    kind: ASTKinds.SelectorWithSimpleIndex;
    value: SelectorToken;
    index: IndexToken;
}
export interface SelectorWithFirstIndex {
    kind: ASTKinds.SelectorWithFirstIndex;
    value: SelectorToken;
    index: IndexToken;
}
export interface SelectorWithEndIndex {
    kind: ASTKinds.SelectorWithEndIndex;
    value: SelectorToken;
    index: IndexToken;
}
export interface SelectorWithStartEndIndex {
    kind: ASTKinds.SelectorWithStartEndIndex;
    value: SelectorToken;
    startIndex: IndexToken;
    endIndex: Nullable<IndexToken>;
}
export interface SelectorWithIndexList {
    kind: ASTKinds.SelectorWithIndexList;
    value: SelectorToken;
    index: IndexToken;
    list: SelectorWithIndexList_$0[];
}
export interface SelectorWithIndexList_$0 {
    kind: ASTKinds.SelectorWithIndexList_$0;
    index: IndexToken;
}
export interface SelectorWithWildcard {
    kind: ASTKinds.SelectorWithWildcard;
    value: SelectorToken;
}
export interface SelectorWithWithRandomIndex {
    kind: ASTKinds.SelectorWithWithRandomIndex;
    value: SelectorToken;
    count: Nullable<string>;
}
export type NameToken = string;
export type IdentifierToken = string;
export type SelectorToken = string;
export type IndexToken = string;
export class Parser {
    private readonly input: string;
    private pos: PosInfo;
    private negating: boolean = false;
    private memoSafe: boolean = true;
    constructor(input: string) {
        this.pos = {overallPos: 0, line: 1, offset: 0};
        this.input = input;
    }
    public reset(pos: PosInfo) {
        this.pos = pos;
    }
    public finished(): boolean {
        return this.pos.overallPos === this.input.length;
    }
    public clearMemos(): void {
        this.$scope$startx$memo.clear();
        this.$scope$startx_$0$memo.clear();
        this.$scope$startx_$1$memo.clear();
        this.$scope$startx_$2$memo.clear();
        this.$scope$startx_$3$memo.clear();
        this.$scope$startx_$4$memo.clear();
        this.$scope$Selector$memo.clear();
        this.$scope$SelectorSimple$memo.clear();
        this.$scope$SelectorWithSimpleIndex$memo.clear();
        this.$scope$SelectorWithFirstIndex$memo.clear();
        this.$scope$SelectorWithEndIndex$memo.clear();
        this.$scope$SelectorWithStartEndIndex$memo.clear();
        this.$scope$SelectorWithIndexList$memo.clear();
        this.$scope$SelectorWithIndexList_$0$memo.clear();
        this.$scope$SelectorWithWildcard$memo.clear();
        this.$scope$SelectorWithWithRandomIndex$memo.clear();
        this.$scope$NameToken$memo.clear();
        this.$scope$IdentifierToken$memo.clear();
        this.$scope$SelectorToken$memo.clear();
        this.$scope$IndexToken$memo.clear();
    }
    protected $scope$startx$memo: Map<number, [Nullable<startx>, PosInfo]> = new Map();
    protected $scope$startx_$0$memo: Map<number, [Nullable<startx_$0>, PosInfo]> = new Map();
    protected $scope$startx_$1$memo: Map<number, [Nullable<startx_$1>, PosInfo]> = new Map();
    protected $scope$startx_$2$memo: Map<number, [Nullable<startx_$2>, PosInfo]> = new Map();
    protected $scope$startx_$3$memo: Map<number, [Nullable<startx_$3>, PosInfo]> = new Map();
    protected $scope$startx_$4$memo: Map<number, [Nullable<startx_$4>, PosInfo]> = new Map();
    protected $scope$Selector$memo: Map<number, [Nullable<Selector>, PosInfo]> = new Map();
    protected $scope$SelectorSimple$memo: Map<number, [Nullable<SelectorSimple>, PosInfo]> = new Map();
    protected $scope$SelectorWithSimpleIndex$memo: Map<number, [Nullable<SelectorWithSimpleIndex>, PosInfo]> = new Map();
    protected $scope$SelectorWithFirstIndex$memo: Map<number, [Nullable<SelectorWithFirstIndex>, PosInfo]> = new Map();
    protected $scope$SelectorWithEndIndex$memo: Map<number, [Nullable<SelectorWithEndIndex>, PosInfo]> = new Map();
    protected $scope$SelectorWithStartEndIndex$memo: Map<number, [Nullable<SelectorWithStartEndIndex>, PosInfo]> = new Map();
    protected $scope$SelectorWithIndexList$memo: Map<number, [Nullable<SelectorWithIndexList>, PosInfo]> = new Map();
    protected $scope$SelectorWithIndexList_$0$memo: Map<number, [Nullable<SelectorWithIndexList_$0>, PosInfo]> = new Map();
    protected $scope$SelectorWithWildcard$memo: Map<number, [Nullable<SelectorWithWildcard>, PosInfo]> = new Map();
    protected $scope$SelectorWithWithRandomIndex$memo: Map<number, [Nullable<SelectorWithWithRandomIndex>, PosInfo]> = new Map();
    protected $scope$NameToken$memo: Map<number, [Nullable<NameToken>, PosInfo]> = new Map();
    protected $scope$IdentifierToken$memo: Map<number, [Nullable<IdentifierToken>, PosInfo]> = new Map();
    protected $scope$SelectorToken$memo: Map<number, [Nullable<SelectorToken>, PosInfo]> = new Map();
    protected $scope$IndexToken$memo: Map<number, [Nullable<IndexToken>, PosInfo]> = new Map();
    public matchstartx($$dpth: number, $$cr?: ErrorTracker): Nullable<startx> {
        return this.memoise(
            () => {
                return this.choice<startx>([
                    () => this.matchstartx_1($$dpth + 1, $$cr),
                    () => this.matchstartx_2($$dpth + 1, $$cr),
                ]);
            },
            this.$scope$startx$memo,
        );
    }
    public matchstartx_1($$dpth: number, $$cr?: ErrorTracker): Nullable<startx_1> {
        return this.run<startx_1>($$dpth,
            () => {
                let $scope$name: Nullable<NameToken>;
                let $scope$scope: Nullable<Nullable<startx_$0>>;
                let $scope$qualifiers: Nullable<startx_$1[]>;
                let $scope$selectors: Nullable<startx_$2[]>;
                let $$res: Nullable<startx_1> = null;
                if (true
                    && this.regexAccept(String.raw`(?:\$\{\s*)`, $$dpth + 1, $$cr) !== null
                    && ($scope$name = this.matchNameToken($$dpth + 1, $$cr)) !== null
                    && (($scope$scope = this.matchstartx_$0($$dpth + 1, $$cr)) || true)
                    && ($scope$qualifiers = this.loop<startx_$1>(() => this.matchstartx_$1($$dpth + 1, $$cr), true)) !== null
                    && this.regexAccept(String.raw`(?:\s*#\s*)`, $$dpth + 1, $$cr) !== null
                    && ($scope$selectors = this.loop<startx_$2>(() => this.matchstartx_$2($$dpth + 1, $$cr), true)) !== null
                ) {
                    $$res = {kind: ASTKinds.startx_1, name: $scope$name, scope: $scope$scope, qualifiers: $scope$qualifiers, selectors: $scope$selectors};
                }
                return $$res;
            });
    }
    public matchstartx_2($$dpth: number, $$cr?: ErrorTracker): Nullable<startx_2> {
        return this.run<startx_2>($$dpth,
            () => {
                let $scope$name: Nullable<NameToken>;
                let $scope$scope: Nullable<Nullable<startx_$3>>;
                let $scope$qualifiers: Nullable<startx_$4[]>;
                let $$res: Nullable<startx_2> = null;
                if (true
                    && this.regexAccept(String.raw`(?:\$\{\s*)`, $$dpth + 1, $$cr) !== null
                    && ($scope$name = this.matchNameToken($$dpth + 1, $$cr)) !== null
                    && (($scope$scope = this.matchstartx_$3($$dpth + 1, $$cr)) || true)
                    && ($scope$qualifiers = this.loop<startx_$4>(() => this.matchstartx_$4($$dpth + 1, $$cr), true)) !== null
                ) {
                    $$res = {kind: ASTKinds.startx_2, name: $scope$name, scope: $scope$scope, qualifiers: $scope$qualifiers};
                }
                return $$res;
            });
    }
    public matchstartx_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<startx_$0> {
        return this.memoise(
            () => {
                return this.run<startx_$0>($$dpth,
                    () => {
                        let $scope$value: Nullable<NameToken>;
                        let $$res: Nullable<startx_$0> = null;
                        if (true
                            && this.regexAccept(String.raw`(?:\s*\+\s*)`, $$dpth + 1, $$cr) !== null
                            && ($scope$value = this.matchNameToken($$dpth + 1, $$cr)) !== null
                        ) {
                            $$res = {kind: ASTKinds.startx_$0, value: $scope$value};
                        }
                        return $$res;
                    });
            },
            this.$scope$startx_$0$memo,
        );
    }
    public matchstartx_$1($$dpth: number, $$cr?: ErrorTracker): Nullable<startx_$1> {
        return this.memoise(
            () => {
                return this.run<startx_$1>($$dpth,
                    () => {
                        let $scope$value: Nullable<IdentifierToken>;
                        let $$res: Nullable<startx_$1> = null;
                        if (true
                            && this.regexAccept(String.raw`(?:\s*:\s*)`, $$dpth + 1, $$cr) !== null
                            && ($scope$value = this.matchIdentifierToken($$dpth + 1, $$cr)) !== null
                        ) {
                            $$res = {kind: ASTKinds.startx_$1, value: $scope$value};
                        }
                        return $$res;
                    });
            },
            this.$scope$startx_$1$memo,
        );
    }
    public matchstartx_$2($$dpth: number, $$cr?: ErrorTracker): Nullable<startx_$2> {
        return this.memoise(
            () => {
                return this.run<startx_$2>($$dpth,
                    () => {
                        let $scope$def: Nullable<Selector>;
                        let $$res: Nullable<startx_$2> = null;
                        if (true
                            && ($scope$def = this.matchSelector($$dpth + 1, $$cr)) !== null
                            && ((this.regexAccept(String.raw`(?:\s*.\s*)`, $$dpth + 1, $$cr)) || true)
                        ) {
                            $$res = {kind: ASTKinds.startx_$2, def: $scope$def};
                        }
                        return $$res;
                    });
            },
            this.$scope$startx_$2$memo,
        );
    }
    public matchstartx_$3($$dpth: number, $$cr?: ErrorTracker): Nullable<startx_$3> {
        return this.memoise(
            () => {
                return this.run<startx_$3>($$dpth,
                    () => {
                        let $scope$value: Nullable<NameToken>;
                        let $$res: Nullable<startx_$3> = null;
                        if (true
                            && this.regexAccept(String.raw`(?:\s*\+\s*)`, $$dpth + 1, $$cr) !== null
                            && ($scope$value = this.matchNameToken($$dpth + 1, $$cr)) !== null
                        ) {
                            $$res = {kind: ASTKinds.startx_$3, value: $scope$value};
                        }
                        return $$res;
                    });
            },
            this.$scope$startx_$3$memo,
        );
    }
    public matchstartx_$4($$dpth: number, $$cr?: ErrorTracker): Nullable<startx_$4> {
        return this.memoise(
            () => {
                return this.run<startx_$4>($$dpth,
                    () => {
                        let $scope$value: Nullable<IdentifierToken>;
                        let $$res: Nullable<startx_$4> = null;
                        if (true
                            && this.regexAccept(String.raw`(?:\s*:\s*)`, $$dpth + 1, $$cr) !== null
                            && ($scope$value = this.matchIdentifierToken($$dpth + 1, $$cr)) !== null
                        ) {
                            $$res = {kind: ASTKinds.startx_$4, value: $scope$value};
                        }
                        return $$res;
                    });
            },
            this.$scope$startx_$4$memo,
        );
    }
    public matchSelector($$dpth: number, $$cr?: ErrorTracker): Nullable<Selector> {
        return this.memoise(
            () => {
                return this.choice<Selector>([
                    () => this.matchSelector_1($$dpth + 1, $$cr),
                    () => this.matchSelector_2($$dpth + 1, $$cr),
                    () => this.matchSelector_3($$dpth + 1, $$cr),
                    () => this.matchSelector_4($$dpth + 1, $$cr),
                    () => this.matchSelector_5($$dpth + 1, $$cr),
                    () => this.matchSelector_6($$dpth + 1, $$cr),
                    () => this.matchSelector_7($$dpth + 1, $$cr),
                    () => this.matchSelector_8($$dpth + 1, $$cr),
                ]);
            },
            this.$scope$Selector$memo,
        );
    }
    public matchSelector_1($$dpth: number, $$cr?: ErrorTracker): Nullable<Selector_1> {
        return this.matchSelectorWithSimpleIndex($$dpth + 1, $$cr);
    }
    public matchSelector_2($$dpth: number, $$cr?: ErrorTracker): Nullable<Selector_2> {
        return this.matchSelectorWithFirstIndex($$dpth + 1, $$cr);
    }
    public matchSelector_3($$dpth: number, $$cr?: ErrorTracker): Nullable<Selector_3> {
        return this.matchSelectorWithEndIndex($$dpth + 1, $$cr);
    }
    public matchSelector_4($$dpth: number, $$cr?: ErrorTracker): Nullable<Selector_4> {
        return this.matchSelectorWithStartEndIndex($$dpth + 1, $$cr);
    }
    public matchSelector_5($$dpth: number, $$cr?: ErrorTracker): Nullable<Selector_5> {
        return this.matchSelectorWithWithRandomIndex($$dpth + 1, $$cr);
    }
    public matchSelector_6($$dpth: number, $$cr?: ErrorTracker): Nullable<Selector_6> {
        return this.matchSelectorWithWildcard($$dpth + 1, $$cr);
    }
    public matchSelector_7($$dpth: number, $$cr?: ErrorTracker): Nullable<Selector_7> {
        return this.matchSelectorWithIndexList($$dpth + 1, $$cr);
    }
    public matchSelector_8($$dpth: number, $$cr?: ErrorTracker): Nullable<Selector_8> {
        return this.matchSelectorSimple($$dpth + 1, $$cr);
    }
    public matchSelectorSimple($$dpth: number, $$cr?: ErrorTracker): Nullable<SelectorSimple> {
        return this.memoise(
            () => {
                return this.run<SelectorSimple>($$dpth,
                    () => {
                        let $scope$value: Nullable<SelectorToken>;
                        let $$res: Nullable<SelectorSimple> = null;
                        if (true
                            && ($scope$value = this.matchSelectorToken($$dpth + 1, $$cr)) !== null
                        ) {
                            $$res = {kind: ASTKinds.SelectorSimple, value: $scope$value};
                        }
                        return $$res;
                    });
            },
            this.$scope$SelectorSimple$memo,
        );
    }
    public matchSelectorWithSimpleIndex($$dpth: number, $$cr?: ErrorTracker): Nullable<SelectorWithSimpleIndex> {
        return this.memoise(
            () => {
                return this.run<SelectorWithSimpleIndex>($$dpth,
                    () => {
                        let $scope$value: Nullable<SelectorToken>;
                        let $scope$index: Nullable<IndexToken>;
                        let $$res: Nullable<SelectorWithSimpleIndex> = null;
                        if (true
                            && ($scope$value = this.matchSelectorToken($$dpth + 1, $$cr)) !== null
                            && this.regexAccept(String.raw`(?:\s*\[\s*)`, $$dpth + 1, $$cr) !== null
                            && ($scope$index = this.matchIndexToken($$dpth + 1, $$cr)) !== null
                            && this.regexAccept(String.raw`(?:\s*\]\s*)`, $$dpth + 1, $$cr) !== null
                        ) {
                            $$res = {kind: ASTKinds.SelectorWithSimpleIndex, value: $scope$value, index: $scope$index};
                        }
                        return $$res;
                    });
            },
            this.$scope$SelectorWithSimpleIndex$memo,
        );
    }
    public matchSelectorWithFirstIndex($$dpth: number, $$cr?: ErrorTracker): Nullable<SelectorWithFirstIndex> {
        return this.memoise(
            () => {
                return this.run<SelectorWithFirstIndex>($$dpth,
                    () => {
                        let $scope$value: Nullable<SelectorToken>;
                        let $scope$index: Nullable<IndexToken>;
                        let $$res: Nullable<SelectorWithFirstIndex> = null;
                        if (true
                            && ($scope$value = this.matchSelectorToken($$dpth + 1, $$cr)) !== null
                            && this.regexAccept(String.raw`(?:\s*\[\s*:\s*)`, $$dpth + 1, $$cr) !== null
                            && ($scope$index = this.matchIndexToken($$dpth + 1, $$cr)) !== null
                            && this.regexAccept(String.raw`(?:\s*\]\s*)`, $$dpth + 1, $$cr) !== null
                        ) {
                            $$res = {kind: ASTKinds.SelectorWithFirstIndex, value: $scope$value, index: $scope$index};
                        }
                        return $$res;
                    });
            },
            this.$scope$SelectorWithFirstIndex$memo,
        );
    }
    public matchSelectorWithEndIndex($$dpth: number, $$cr?: ErrorTracker): Nullable<SelectorWithEndIndex> {
        return this.memoise(
            () => {
                return this.run<SelectorWithEndIndex>($$dpth,
                    () => {
                        let $scope$value: Nullable<SelectorToken>;
                        let $scope$index: Nullable<IndexToken>;
                        let $$res: Nullable<SelectorWithEndIndex> = null;
                        if (true
                            && ($scope$value = this.matchSelectorToken($$dpth + 1, $$cr)) !== null
                            && this.regexAccept(String.raw`(?:\s*\[\s*-\s*)`, $$dpth + 1, $$cr) !== null
                            && ($scope$index = this.matchIndexToken($$dpth + 1, $$cr)) !== null
                            && this.regexAccept(String.raw`(?:\s*:\s*\]\s*)`, $$dpth + 1, $$cr) !== null
                        ) {
                            $$res = {kind: ASTKinds.SelectorWithEndIndex, value: $scope$value, index: $scope$index};
                        }
                        return $$res;
                    });
            },
            this.$scope$SelectorWithEndIndex$memo,
        );
    }
    public matchSelectorWithStartEndIndex($$dpth: number, $$cr?: ErrorTracker): Nullable<SelectorWithStartEndIndex> {
        return this.memoise(
            () => {
                return this.run<SelectorWithStartEndIndex>($$dpth,
                    () => {
                        let $scope$value: Nullable<SelectorToken>;
                        let $scope$startIndex: Nullable<IndexToken>;
                        let $scope$endIndex: Nullable<Nullable<IndexToken>>;
                        let $$res: Nullable<SelectorWithStartEndIndex> = null;
                        if (true
                            && ($scope$value = this.matchSelectorToken($$dpth + 1, $$cr)) !== null
                            && this.regexAccept(String.raw`(?:\s*\[\s*)`, $$dpth + 1, $$cr) !== null
                            && ($scope$startIndex = this.matchIndexToken($$dpth + 1, $$cr)) !== null
                            && this.regexAccept(String.raw`(?:\s*:\s*)`, $$dpth + 1, $$cr) !== null
                            && (($scope$endIndex = this.matchIndexToken($$dpth + 1, $$cr)) || true)
                            && this.regexAccept(String.raw`(?:\s*:\s*\]\s*)`, $$dpth + 1, $$cr) !== null
                        ) {
                            $$res = {kind: ASTKinds.SelectorWithStartEndIndex, value: $scope$value, startIndex: $scope$startIndex, endIndex: $scope$endIndex};
                        }
                        return $$res;
                    });
            },
            this.$scope$SelectorWithStartEndIndex$memo,
        );
    }
    public matchSelectorWithIndexList($$dpth: number, $$cr?: ErrorTracker): Nullable<SelectorWithIndexList> {
        return this.memoise(
            () => {
                return this.run<SelectorWithIndexList>($$dpth,
                    () => {
                        let $scope$value: Nullable<SelectorToken>;
                        let $scope$index: Nullable<IndexToken>;
                        let $scope$list: Nullable<SelectorWithIndexList_$0[]>;
                        let $$res: Nullable<SelectorWithIndexList> = null;
                        if (true
                            && ($scope$value = this.matchSelectorToken($$dpth + 1, $$cr)) !== null
                            && this.regexAccept(String.raw`(?:\s*\[\s*)`, $$dpth + 1, $$cr) !== null
                            && ($scope$index = this.matchIndexToken($$dpth + 1, $$cr)) !== null
                            && ($scope$list = this.loop<SelectorWithIndexList_$0>(() => this.matchSelectorWithIndexList_$0($$dpth + 1, $$cr), true)) !== null
                            && this.regexAccept(String.raw`(?:\s*\]\s*)`, $$dpth + 1, $$cr) !== null
                        ) {
                            $$res = {kind: ASTKinds.SelectorWithIndexList, value: $scope$value, index: $scope$index, list: $scope$list};
                        }
                        return $$res;
                    });
            },
            this.$scope$SelectorWithIndexList$memo,
        );
    }
    public matchSelectorWithIndexList_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<SelectorWithIndexList_$0> {
        return this.memoise(
            () => {
                return this.run<SelectorWithIndexList_$0>($$dpth,
                    () => {
                        let $scope$index: Nullable<IndexToken>;
                        let $$res: Nullable<SelectorWithIndexList_$0> = null;
                        if (true
                            && this.regexAccept(String.raw`(?:\s*,\s*)`, $$dpth + 1, $$cr) !== null
                            && ($scope$index = this.matchIndexToken($$dpth + 1, $$cr)) !== null
                        ) {
                            $$res = {kind: ASTKinds.SelectorWithIndexList_$0, index: $scope$index};
                        }
                        return $$res;
                    });
            },
            this.$scope$SelectorWithIndexList_$0$memo,
        );
    }
    public matchSelectorWithWildcard($$dpth: number, $$cr?: ErrorTracker): Nullable<SelectorWithWildcard> {
        return this.memoise(
            () => {
                return this.run<SelectorWithWildcard>($$dpth,
                    () => {
                        let $scope$value: Nullable<SelectorToken>;
                        let $$res: Nullable<SelectorWithWildcard> = null;
                        if (true
                            && ($scope$value = this.matchSelectorToken($$dpth + 1, $$cr)) !== null
                            && this.regexAccept(String.raw`(?:\s*\[\s*\*\s*\]\s*)`, $$dpth + 1, $$cr) !== null
                        ) {
                            $$res = {kind: ASTKinds.SelectorWithWildcard, value: $scope$value};
                        }
                        return $$res;
                    });
            },
            this.$scope$SelectorWithWildcard$memo,
        );
    }
    public matchSelectorWithWithRandomIndex($$dpth: number, $$cr?: ErrorTracker): Nullable<SelectorWithWithRandomIndex> {
        return this.memoise(
            () => {
                return this.run<SelectorWithWithRandomIndex>($$dpth,
                    () => {
                        let $scope$value: Nullable<SelectorToken>;
                        let $scope$count: Nullable<Nullable<string>>;
                        let $$res: Nullable<SelectorWithWithRandomIndex> = null;
                        if (true
                            && ($scope$value = this.matchSelectorToken($$dpth + 1, $$cr)) !== null
                            && this.regexAccept(String.raw`(?:\s*\[\s*)`, $$dpth + 1, $$cr) !== null
                            && (($scope$count = this.regexAccept(String.raw`(?:[0-9]+)`, $$dpth + 1, $$cr)) || true)
                            && this.regexAccept(String.raw`(?:\s*\?\s*\])`, $$dpth + 1, $$cr) !== null
                        ) {
                            $$res = {kind: ASTKinds.SelectorWithWithRandomIndex, value: $scope$value, count: $scope$count};
                        }
                        return $$res;
                    });
            },
            this.$scope$SelectorWithWithRandomIndex$memo,
        );
    }
    public matchNameToken($$dpth: number, $$cr?: ErrorTracker): Nullable<NameToken> {
        return this.memoise(
            () => {
                return this.regexAccept(String.raw`(?:[^#&@$\{\}:.+\[\] \t\n]+)`, $$dpth + 1, $$cr);
            },
            this.$scope$NameToken$memo,
        );
    }
    public matchIdentifierToken($$dpth: number, $$cr?: ErrorTracker): Nullable<IdentifierToken> {
        return this.memoise(
            () => {
                return this.regexAccept(String.raw`(?:[^#:$\{\}\[\] \t\n]+)`, $$dpth + 1, $$cr);
            },
            this.$scope$IdentifierToken$memo,
        );
    }
    public matchSelectorToken($$dpth: number, $$cr?: ErrorTracker): Nullable<SelectorToken> {
        return this.memoise(
            () => {
                return this.regexAccept(String.raw`(?:[^#$\{\}:.+\[\] \t\n]+)`, $$dpth + 1, $$cr);
            },
            this.$scope$SelectorToken$memo,
        );
    }
    public matchIndexToken($$dpth: number, $$cr?: ErrorTracker): Nullable<IndexToken> {
        return this.memoise(
            () => {
                return this.regexAccept(String.raw`(?:[0-9]+)`, $$dpth + 1, $$cr);
            },
            this.$scope$IndexToken$memo,
        );
    }
    public test(): boolean {
        const mrk = this.mark();
        const res = this.matchstartx(0);
        const ans = res !== null;
        this.reset(mrk);
        return ans;
    }
    public parse(): ParseResult {
        const mrk = this.mark();
        const res = this.matchstartx(0);
        if (res)
            return {ast: res, errs: []};
        this.reset(mrk);
        const rec = new ErrorTracker();
        this.clearMemos();
        this.matchstartx(0, rec);
        const err = rec.getErr()
        return {ast: res, errs: err !== null ? [err] : []}
    }
    public mark(): PosInfo {
        return this.pos;
    }
    private loop<T>(func: $$RuleType<T>, star: boolean = false): Nullable<T[]> {
        const mrk = this.mark();
        const res: T[] = [];
        for (;;) {
            const t = func();
            if (t === null) {
                break;
            }
            res.push(t);
        }
        if (star || res.length > 0) {
            return res;
        }
        this.reset(mrk);
        return null;
    }
    private run<T>($$dpth: number, fn: $$RuleType<T>): Nullable<T> {
        const mrk = this.mark();
        const res = fn()
        if (res !== null)
            return res;
        this.reset(mrk);
        return null;
    }
    private choice<T>(fns: Array<$$RuleType<T>>): Nullable<T> {
        for (const f of fns) {
            const res = f();
            if (res !== null) {
                return res;
            }
        }
        return null;
    }
    private regexAccept(match: string, dpth: number, cr?: ErrorTracker): Nullable<string> {
        return this.run<string>(dpth,
            () => {
                const reg = new RegExp(match, "y");
                const mrk = this.mark();
                reg.lastIndex = mrk.overallPos;
                const res = this.tryConsume(reg);
                if(cr) {
                    cr.record(mrk, res, {
                        kind: "RegexMatch",
                        // We substring from 3 to len - 1 to strip off the
                        // non-capture group syntax added as a WebKit workaround
                        literal: match.substring(3, match.length - 1),
                        negated: this.negating,
                    });
                }
                return res;
            });
    }
    private tryConsume(reg: RegExp): Nullable<string> {
        const res = reg.exec(this.input);
        if (res) {
            let lineJmp = 0;
            let lind = -1;
            for (let i = 0; i < res[0].length; ++i) {
                if (res[0][i] === "\n") {
                    ++lineJmp;
                    lind = i;
                }
            }
            this.pos = {
                overallPos: reg.lastIndex,
                line: this.pos.line + lineJmp,
                offset: lind === -1 ? this.pos.offset + res[0].length : (res[0].length - lind - 1)
            };
            return res[0];
        }
        return null;
    }
    private noConsume<T>(fn: $$RuleType<T>): Nullable<T> {
        const mrk = this.mark();
        const res = fn();
        this.reset(mrk);
        return res;
    }
    private negate<T>(fn: $$RuleType<T>): Nullable<boolean> {
        const mrk = this.mark();
        const oneg = this.negating;
        this.negating = !oneg;
        const res = fn();
        this.negating = oneg;
        this.reset(mrk);
        return res === null ? true : null;
    }
    private memoise<K>(rule: $$RuleType<K>, memo: Map<number, [Nullable<K>, PosInfo]>): Nullable<K> {
        const $scope$pos = this.mark();
        const $scope$memoRes = memo.get($scope$pos.overallPos);
        if(this.memoSafe && $scope$memoRes !== undefined) {
        this.reset($scope$memoRes[1]);
        return $scope$memoRes[0];
        }
        const $scope$result = rule();
        if(this.memoSafe)
        memo.set($scope$pos.overallPos, [$scope$result, this.mark()]);
        return $scope$result;
    }
}
export function parse(s: string): ParseResult {
    const p = new Parser(s);
    return p.parse();
}
export interface ParseResult {
    ast: Nullable<startx>;
    errs: SyntaxErr[];
}
export interface PosInfo {
    readonly overallPos: number;
    readonly line: number;
    readonly offset: number;
}
export interface RegexMatch {
    readonly kind: "RegexMatch";
    readonly negated: boolean;
    readonly literal: string;
}
export type EOFMatch = { kind: "EOF"; negated: boolean };
export type MatchAttempt = RegexMatch | EOFMatch;
export class SyntaxErr {
    public pos: PosInfo;
    public expmatches: MatchAttempt[];
    constructor(pos: PosInfo, expmatches: MatchAttempt[]) {
        this.pos = pos;
        this.expmatches = [...expmatches];
    }
    public toString(): string {
        return `Syntax Error at line ${this.pos.line}:${this.pos.offset}. Expected one of ${this.expmatches.map(x => x.kind === "EOF" ? " EOF" : ` ${x.negated ? 'not ': ''}'${x.literal}'`)}`;
    }
}
class ErrorTracker {
    private mxpos: PosInfo = {overallPos: -1, line: -1, offset: -1};
    private regexset: Set<string> = new Set();
    private pmatches: MatchAttempt[] = [];
    public record(pos: PosInfo, result: any, att: MatchAttempt) {
        if ((result === null) === att.negated)
            return;
        if (pos.overallPos > this.mxpos.overallPos) {
            this.mxpos = pos;
            this.pmatches = [];
            this.regexset.clear()
        }
        if (this.mxpos.overallPos === pos.overallPos) {
            if(att.kind === "RegexMatch") {
                if(!this.regexset.has(att.literal))
                    this.pmatches.push(att);
                this.regexset.add(att.literal);
            } else {
                this.pmatches.push(att);
            }
        }
    }
    public getErr(): SyntaxErr | null {
        if (this.mxpos.overallPos !== -1)
            return new SyntaxErr(this.mxpos, this.pmatches);
        return null;
    }
}