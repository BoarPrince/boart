// Generated by Peggy 3.0.2.
//
// https://peggyjs.org/

"use strict";

function peg$subclass(child, parent) {
  function C() { this.constructor = child; }
  C.prototype = parent.prototype;
  child.prototype = new C();
}

function peg$SyntaxError(message, expected, found, location) {
  var self = Error.call(this, message);
  // istanbul ignore next Check is a necessary evil to support older environments
  if (Object.setPrototypeOf) {
    Object.setPrototypeOf(self, peg$SyntaxError.prototype);
  }
  self.expected = expected;
  self.found = found;
  self.location = location;
  self.name = "SyntaxError";
  return self;
}

peg$subclass(peg$SyntaxError, Error);

function peg$padEnd(str, targetLength, padString) {
  padString = padString || " ";
  if (str.length > targetLength) { return str; }
  targetLength -= str.length;
  padString += padString.repeat(targetLength);
  return str + padString.slice(0, targetLength);
}

peg$SyntaxError.prototype.format = function(sources) {
  var str = "Error: " + this.message;
  if (this.location) {
    var src = null;
    var k;
    for (k = 0; k < sources.length; k++) {
      if (sources[k].source === this.location.source) {
        src = sources[k].text.split(/\r\n|\n|\r/g);
        break;
      }
    }
    var s = this.location.start;
    var offset_s = (this.location.source && (typeof this.location.source.offset === "function"))
      ? this.location.source.offset(s)
      : s;
    var loc = this.location.source + ":" + offset_s.line + ":" + offset_s.column;
    if (src) {
      var e = this.location.end;
      var filler = peg$padEnd("", offset_s.line.toString().length, ' ');
      var line = src[s.line - 1];
      var last = s.line === e.line ? e.column : line.length + 1;
      var hatLen = (last - s.column) || 1;
      str += "\n --> " + loc + "\n"
          + filler + " |\n"
          + offset_s.line + " | " + line + "\n"
          + filler + " | " + peg$padEnd("", s.column - 1, ' ')
          + peg$padEnd("", hatLen, "^");
    } else {
      str += "\n at " + loc;
    }
  }
  return str;
};

peg$SyntaxError.buildMessage = function(expected, found) {
  var DESCRIBE_EXPECTATION_FNS = {
    literal: function(expectation) {
      return "\"" + literalEscape(expectation.text) + "\"";
    },

    class: function(expectation) {
      var escapedParts = expectation.parts.map(function(part) {
        return Array.isArray(part)
          ? classEscape(part[0]) + "-" + classEscape(part[1])
          : classEscape(part);
      });

      return "[" + (expectation.inverted ? "^" : "") + escapedParts.join("") + "]";
    },

    any: function() {
      return "any character";
    },

    end: function() {
      return "end of input";
    },

    other: function(expectation) {
      return expectation.description;
    }
  };

  function hex(ch) {
    return ch.charCodeAt(0).toString(16).toUpperCase();
  }

  function literalEscape(s) {
    return s
      .replace(/\\/g, "\\\\")
      .replace(/"/g,  "\\\"")
      .replace(/\0/g, "\\0")
      .replace(/\t/g, "\\t")
      .replace(/\n/g, "\\n")
      .replace(/\r/g, "\\r")
      .replace(/[\x00-\x0F]/g,          function(ch) { return "\\x0" + hex(ch); })
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return "\\x"  + hex(ch); });
  }

  function classEscape(s) {
    return s
      .replace(/\\/g, "\\\\")
      .replace(/\]/g, "\\]")
      .replace(/\^/g, "\\^")
      .replace(/-/g,  "\\-")
      .replace(/\0/g, "\\0")
      .replace(/\t/g, "\\t")
      .replace(/\n/g, "\\n")
      .replace(/\r/g, "\\r")
      .replace(/[\x00-\x0F]/g,          function(ch) { return "\\x0" + hex(ch); })
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return "\\x"  + hex(ch); });
  }

  function describeExpectation(expectation) {
    return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);
  }

  function describeExpected(expected) {
    var descriptions = expected.map(describeExpectation);
    var i, j;

    descriptions.sort();

    if (descriptions.length > 0) {
      for (i = 1, j = 1; i < descriptions.length; i++) {
        if (descriptions[i - 1] !== descriptions[i]) {
          descriptions[j] = descriptions[i];
          j++;
        }
      }
      descriptions.length = j;
    }

    switch (descriptions.length) {
      case 1:
        return descriptions[0];

      case 2:
        return descriptions[0] + " or " + descriptions[1];

      default:
        return descriptions.slice(0, -1).join(", ")
          + ", or "
          + descriptions[descriptions.length - 1];
    }
  }

  function describeFound(found) {
    return found ? "\"" + literalEscape(found) + "\"" : "end of input";
  }

  return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
};

function peg$parse(input, options) {
  options = options !== undefined ? options : {};

  var peg$FAILED = {};
  var peg$source = options.grammarSource;

  var peg$startRuleFunctions = { START_VALUE: peg$parseSTART_VALUE };
  var peg$startRuleFunction = peg$parseSTART_VALUE;

  var peg$c0 = "@";
  var peg$c1 = "::";
  var peg$c2 = ":-";
  var peg$c3 = ":=";
  var peg$c4 = ":";
  var peg$c5 = "|";
  var peg$c6 = "?#";
  var peg$c7 = "#";
  var peg$c8 = "[";
  var peg$c9 = "]";
  var peg$c10 = ",";
  var peg$c11 = "-";
  var peg$c12 = "*";
  var peg$c13 = ".";
  var peg$c14 = "?.";
  var peg$c15 = "\"";
  var peg$c16 = "'";
  var peg$c17 = "\\";
  var peg$c18 = "\x01";
  var peg$c19 = "\x02";
  var peg$c20 = "b";
  var peg$c21 = "f";
  var peg$c22 = "n";
  var peg$c23 = "r";
  var peg$c24 = "t";
  var peg$c25 = "v";

  var peg$r0 = /^[0-9]/;
  var peg$r1 = /^[^{}|]/;
  var peg$r2 = /^[glts]/;
  var peg$r3 = /^[ \t]/;
  var peg$r4 = /^[a-zA-Z0-9_]/;
  var peg$r5 = /^[a-zA-Z0-9\-_]/;

  var peg$e0 = peg$literalExpectation("@", false);
  var peg$e1 = peg$literalExpectation("::", false);
  var peg$e2 = peg$literalExpectation(":-", false);
  var peg$e3 = peg$literalExpectation(":=", false);
  var peg$e4 = peg$literalExpectation(":", false);
  var peg$e5 = peg$literalExpectation("|", false);
  var peg$e6 = peg$literalExpectation("?#", false);
  var peg$e7 = peg$literalExpectation("#", false);
  var peg$e8 = peg$literalExpectation("[", false);
  var peg$e9 = peg$literalExpectation("]", false);
  var peg$e10 = peg$literalExpectation(",", false);
  var peg$e11 = peg$literalExpectation("-", false);
  var peg$e12 = peg$literalExpectation("*", false);
  var peg$e13 = peg$classExpectation([["0", "9"]], false, false);
  var peg$e14 = peg$classExpectation(["{", "}", "|"], true, false);
  var peg$e15 = peg$classExpectation(["g", "l", "t", "s"], false, false);
  var peg$e16 = peg$classExpectation([" ", "\t"], false, false);
  var peg$e17 = peg$literalExpectation(".", false);
  var peg$e18 = peg$literalExpectation("?.", false);
  var peg$e19 = peg$literalExpectation("\"", false);
  var peg$e20 = peg$literalExpectation("'", false);
  var peg$e21 = peg$literalExpectation("\\", false);
  var peg$e22 = peg$anyExpectation();
  var peg$e23 = peg$literalExpectation("\x01", false);
  var peg$e24 = peg$literalExpectation("\x02", false);
  var peg$e25 = peg$literalExpectation("b", false);
  var peg$e26 = peg$literalExpectation("f", false);
  var peg$e27 = peg$literalExpectation("n", false);
  var peg$e28 = peg$literalExpectation("r", false);
  var peg$e29 = peg$literalExpectation("t", false);
  var peg$e30 = peg$literalExpectation("v", false);
  var peg$e31 = peg$classExpectation([["a", "z"], ["A", "Z"], ["0", "9"], "_"], false, false);
  var peg$e32 = peg$classExpectation([["a", "z"], ["A", "Z"], ["0", "9"], "-", "_"], false, false);

  var peg$f0 = function(name, scope, qualifier, selector, default_Operator, pipes) { return { name: name, scope: scope, qualifier: qualifier, selectors: selector && selector.selectors || [], default: default_Operator, pipes: pipes } };
  var peg$f1 = function(name, scope, qualifier, datascope, selector) { return { name: name, scope: scope, qualifier: qualifier, datascope: datascope, selectors: selector && selector.selectors || [] } };
  var peg$f2 = function(scope, name, selector) { return { scope: scope, qualifier: name, selectors: selector && selector.selectors || [] } };
  var peg$f3 = function(name) { return {'value': name} };
  var peg$f4 = function(scope) { return {'value': scope, 'location': location()} };
  var peg$f5 = function(datascope) { return {'value': datascope, 'location': location()} };
  var peg$f6 = function(operator, value) { return {'value': value, 'operator': operator, 'location': location()} };
  var peg$f7 = function() { return 'Default'; };
  var peg$f8 = function() { return 'DefaultAssignment'; };
  var peg$f9 = function(name, parameter) { return {'value': name, 'paras': parameter} };
  var peg$f10 = function(name, paras) { return {name, paras} };
  var peg$f11 = function(start, delim, sel) { sel.optional = delim.isOptional; return sel;};
  var peg$f12 = function(start, selectors) {
                  selectors.match = text();
                  selectors[0].optional = start === '?#';
                  return { selectors };
                };
  var peg$f13 = function(selector_simple) { return {'type': 'simple', 'value': selector_simple}; };
  var peg$f14 = function(selector_simple_index, index) { return {'type': 'with_index', 'value': selector_simple_index, 'index': parseInt(index)}; };
  var peg$f15 = function(selector_list_index, index) { return {'type': 'list', 'value': selector_list_index, 'indexes': index.map(i => parseInt(i))}; };
  var peg$f16 = function(selector_with_startindex, start) { return {'type': 'start', 'value': selector_with_startindex, 'start': parseInt(start)}; };
  var peg$f17 = function(selector_with_endindex, end) { return {'type': 'end', 'value': selector_with_endindex, 'end': parseInt(end.replace(/\s/g, '')) }; };
  var peg$f18 = function(selector_with_start_endindex, start, end) { return {'type': 'start_end', 'value': selector_with_start_endindex, 'start': parseInt(start), 'end': parseInt(end.replace(/\s/g, ''))}; };
  var peg$f19 = function(selector_with_wildcard) { return {'type': 'wildcard', 'value' : selector_with_wildcard}; };
  var peg$f20 = function(delim) { return { 'isOptional' : delim === '?.' } };
  var peg$f21 = function(chars) { return chars.join(''); };
  var peg$f22 = function(chars) { return chars.join(''); };
  var peg$f23 = function(char) { return char; };
  var peg$f24 = function(sequence) { return sequence; };
  var peg$f25 = function(char) { return char; };
  var peg$f26 = function(sequence) { return sequence; };
  var peg$f27 = function() { return "\\";   };
  var peg$f28 = function() { return "$";    };
  var peg$f29 = function() { return "\b";   };
  var peg$f30 = function() { return "\f";   };
  var peg$f31 = function() { return "\n";   };
  var peg$f32 = function() { return "\r";   };
  var peg$f33 = function() { return "\t";   };
  var peg$f34 = function() { return "\x0B"; };
  var peg$currPos = 0;
  var peg$savedPos = 0;
  var peg$posDetailsCache = [{ line: 1, column: 1 }];
  var peg$maxFailPos = 0;
  var peg$maxFailExpected = [];
  var peg$silentFails = 0;

  var peg$result;

  if ("startRule" in options) {
    if (!(options.startRule in peg$startRuleFunctions)) {
      throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
    }

    peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
  }

  function text() {
    return input.substring(peg$savedPos, peg$currPos);
  }

  function offset() {
    return peg$savedPos;
  }

  function range() {
    return {
      source: peg$source,
      start: peg$savedPos,
      end: peg$currPos
    };
  }

  function location() {
    return peg$computeLocation(peg$savedPos, peg$currPos);
  }

  function expected(description, location) {
    location = location !== undefined
      ? location
      : peg$computeLocation(peg$savedPos, peg$currPos);

    throw peg$buildStructuredError(
      [peg$otherExpectation(description)],
      input.substring(peg$savedPos, peg$currPos),
      location
    );
  }

  function error(message, location) {
    location = location !== undefined
      ? location
      : peg$computeLocation(peg$savedPos, peg$currPos);

    throw peg$buildSimpleError(message, location);
  }

  function peg$literalExpectation(text, ignoreCase) {
    return { type: "literal", text: text, ignoreCase: ignoreCase };
  }

  function peg$classExpectation(parts, inverted, ignoreCase) {
    return { type: "class", parts: parts, inverted: inverted, ignoreCase: ignoreCase };
  }

  function peg$anyExpectation() {
    return { type: "any" };
  }

  function peg$endExpectation() {
    return { type: "end" };
  }

  function peg$otherExpectation(description) {
    return { type: "other", description: description };
  }

  function peg$computePosDetails(pos) {
    var details = peg$posDetailsCache[pos];
    var p;

    if (details) {
      return details;
    } else {
      p = pos - 1;
      while (!peg$posDetailsCache[p]) {
        p--;
      }

      details = peg$posDetailsCache[p];
      details = {
        line: details.line,
        column: details.column
      };

      while (p < pos) {
        if (input.charCodeAt(p) === 10) {
          details.line++;
          details.column = 1;
        } else {
          details.column++;
        }

        p++;
      }

      peg$posDetailsCache[pos] = details;

      return details;
    }
  }

  function peg$computeLocation(startPos, endPos, offset) {
    var startPosDetails = peg$computePosDetails(startPos);
    var endPosDetails = peg$computePosDetails(endPos);

    var res = {
      source: peg$source,
      start: {
        offset: startPos,
        line: startPosDetails.line,
        column: startPosDetails.column
      },
      end: {
        offset: endPos,
        line: endPosDetails.line,
        column: endPosDetails.column
      }
    };
    if (offset && peg$source && (typeof peg$source.offset === "function")) {
      res.start = peg$source.offset(res.start);
      res.end = peg$source.offset(res.end);
    }
    return res;
  }

  function peg$fail(expected) {
    if (peg$currPos < peg$maxFailPos) { return; }

    if (peg$currPos > peg$maxFailPos) {
      peg$maxFailPos = peg$currPos;
      peg$maxFailExpected = [];
    }

    peg$maxFailExpected.push(expected);
  }

  function peg$buildSimpleError(message, location) {
    return new peg$SyntaxError(message, null, null, location);
  }

  function peg$buildStructuredError(expected, found, location) {
    return new peg$SyntaxError(
      peg$SyntaxError.buildMessage(expected, found),
      expected,
      found,
      location
    );
  }

  function peg$parseSTART_VARIABLE() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8;

    s0 = peg$currPos;
    s1 = peg$parse_();
    s2 = peg$parseNAME();
    if (s2 !== peg$FAILED) {
      s3 = peg$parseSCOPE();
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s4 = peg$parseQUALIFIER();
      if (s4 === peg$FAILED) {
        s4 = null;
      }
      s5 = peg$parseSELECTOR();
      if (s5 === peg$FAILED) {
        s5 = null;
      }
      s6 = peg$parseDEFAULT();
      if (s6 === peg$FAILED) {
        s6 = null;
      }
      s7 = peg$parsePIPES();
      s8 = peg$parse_();
      peg$savedPos = s0;
      s0 = peg$f0(s2, s3, s4, s5, s6, s7);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseSTART_ACTION() {
    var s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$currPos;
    s1 = peg$parse_();
    s2 = peg$parseNAME();
    if (s2 !== peg$FAILED) {
      s3 = peg$parseSCOPE();
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s4 = peg$parseQUALIFIER();
      if (s4 === peg$FAILED) {
        s4 = null;
      }
      s5 = peg$parseDATASCOPE();
      if (s5 === peg$FAILED) {
        s5 = null;
      }
      s6 = peg$parseSELECTOR();
      if (s6 === peg$FAILED) {
        s6 = null;
      }
      peg$savedPos = s0;
      s0 = peg$f1(s2, s3, s4, s5, s6);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseSTART_VALUE() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$parse_();
    s2 = peg$parseSCOPE();
    if (s2 === peg$FAILED) {
      s2 = null;
    }
    s3 = peg$parseNAME();
    if (s3 !== peg$FAILED) {
      s4 = peg$parseSELECTOR();
      if (s4 === peg$FAILED) {
        s4 = null;
      }
      peg$savedPos = s0;
      s0 = peg$f2(s2, s3, s4);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseNAME() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = peg$parseTOKEN();
    if (s2 !== peg$FAILED) {
      s1 = input.substring(s1, peg$currPos);
    } else {
      s1 = s2;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f3(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseSCOPE() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parse_();
    if (input.charCodeAt(peg$currPos) === 64) {
      s2 = peg$c0;
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e0); }
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$parse_();
      s4 = peg$currPos;
      s5 = peg$parseSCOPETOKEN();
      if (s5 !== peg$FAILED) {
        s4 = input.substring(s4, peg$currPos);
      } else {
        s4 = s5;
      }
      if (s4 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f4(s4);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseDATASCOPE() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parse_();
    if (input.substr(peg$currPos, 2) === peg$c1) {
      s2 = peg$c1;
      peg$currPos += 2;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e1); }
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$parse_();
      s4 = peg$currPos;
      s5 = peg$parseTOKEN();
      if (s5 !== peg$FAILED) {
        s4 = input.substring(s4, peg$currPos);
      } else {
        s4 = s5;
      }
      if (s4 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f5(s4);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseDEFAULT() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parse_();
    s2 = peg$parseDEFAULT_OPERATOR();
    if (s2 !== peg$FAILED) {
      s3 = peg$parse_();
      s4 = peg$parseSTRING();
      if (s4 === peg$FAILED) {
        s4 = peg$currPos;
        s5 = peg$parseDEFAULTVALUE();
        if (s5 !== peg$FAILED) {
          s4 = input.substring(s4, peg$currPos);
        } else {
          s4 = s5;
        }
      }
      if (s4 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f6(s2, s4);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseDEFAULT_OPERATOR() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2) === peg$c2) {
      s1 = peg$c2;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e2); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f7();
    }
    s0 = s1;
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 2) === peg$c3) {
        s1 = peg$c3;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e3); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f8();
      }
      s0 = s1;
    }

    return s0;
  }

  function peg$parseQUALIFIER() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

    s0 = peg$currPos;
    s1 = peg$parse_();
    if (input.charCodeAt(peg$currPos) === 58) {
      s2 = peg$c4;
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e4); }
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$parse_();
      s4 = peg$currPos;
      s5 = peg$parseTOKEN();
      if (s5 !== peg$FAILED) {
        s4 = input.substring(s4, peg$currPos);
      } else {
        s4 = s5;
      }
      if (s4 !== peg$FAILED) {
        s5 = [];
        s6 = peg$currPos;
        s7 = peg$parse_();
        if (input.charCodeAt(peg$currPos) === 58) {
          s8 = peg$c4;
          peg$currPos++;
        } else {
          s8 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e4); }
        }
        if (s8 !== peg$FAILED) {
          s9 = peg$parse_();
          s10 = peg$parsePARAMETER();
          if (s10 !== peg$FAILED) {
            s6 = s10;
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
        } else {
          peg$currPos = s6;
          s6 = peg$FAILED;
        }
        while (s6 !== peg$FAILED) {
          s5.push(s6);
          s6 = peg$currPos;
          s7 = peg$parse_();
          if (input.charCodeAt(peg$currPos) === 58) {
            s8 = peg$c4;
            peg$currPos++;
          } else {
            s8 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e4); }
          }
          if (s8 !== peg$FAILED) {
            s9 = peg$parse_();
            s10 = peg$parsePARAMETER();
            if (s10 !== peg$FAILED) {
              s6 = s10;
            } else {
              peg$currPos = s6;
              s6 = peg$FAILED;
            }
          } else {
            peg$currPos = s6;
            s6 = peg$FAILED;
          }
        }
        s6 = peg$parse_();
        peg$savedPos = s0;
        s0 = peg$f9(s4, s5);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsePIPES() {
    var s0, s1, s2, s3, s4, s5;

    s0 = [];
    s1 = peg$currPos;
    s2 = peg$parse_();
    if (input.charCodeAt(peg$currPos) === 124) {
      s3 = peg$c5;
      peg$currPos++;
    } else {
      s3 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e5); }
    }
    if (s3 !== peg$FAILED) {
      s4 = peg$parse_();
      s5 = peg$parseSINGLE_PIPE();
      if (s5 !== peg$FAILED) {
        s1 = s5;
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    while (s1 !== peg$FAILED) {
      s0.push(s1);
      s1 = peg$currPos;
      s2 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 124) {
        s3 = peg$c5;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e5); }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = peg$parseSINGLE_PIPE();
        if (s5 !== peg$FAILED) {
          s1 = s5;
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseSINGLE_PIPE() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parse_();
    s2 = peg$currPos;
    s3 = peg$parseTOKEN();
    if (s3 !== peg$FAILED) {
      s2 = input.substring(s2, peg$currPos);
    } else {
      s2 = s3;
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$parse_();
      s4 = peg$parsePIPE_PARAMETER();
      s5 = peg$parse_();
      peg$savedPos = s0;
      s0 = peg$f10(s2, s4);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsePIPE_PARAMETER() {
    var s0, s1, s2, s3, s4, s5;

    s0 = [];
    s1 = peg$currPos;
    s2 = peg$parse_();
    if (input.charCodeAt(peg$currPos) === 58) {
      s3 = peg$c4;
      peg$currPos++;
    } else {
      s3 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e4); }
    }
    if (s3 !== peg$FAILED) {
      s4 = peg$parse_();
      s5 = peg$parsePARAMETER();
      if (s5 !== peg$FAILED) {
        s1 = s5;
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    while (s1 !== peg$FAILED) {
      s0.push(s1);
      s1 = peg$currPos;
      s2 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 58) {
        s3 = peg$c4;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e4); }
      }
      if (s3 !== peg$FAILED) {
        s4 = peg$parse_();
        s5 = peg$parsePARAMETER();
        if (s5 !== peg$FAILED) {
          s1 = s5;
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseSELECTOR() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

    s0 = peg$currPos;
    s1 = peg$parse_();
    if (input.substr(peg$currPos, 2) === peg$c6) {
      s2 = peg$c6;
      peg$currPos += 2;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e6); }
    }
    if (s2 === peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 35) {
        s2 = peg$c7;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e7); }
      }
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$parse_();
      s4 = [];
      s5 = peg$currPos;
      s6 = peg$parse_();
      s7 = peg$parseDELIMITER();
      if (s7 !== peg$FAILED) {
        s8 = peg$parse_();
        s9 = peg$parseSELECTORS();
        if (s9 !== peg$FAILED) {
          s10 = peg$parse_();
          peg$savedPos = s5;
          s5 = peg$f11(s2, s7, s9);
        } else {
          peg$currPos = s5;
          s5 = peg$FAILED;
        }
      } else {
        peg$currPos = s5;
        s5 = peg$FAILED;
      }
      if (s5 === peg$FAILED) {
        s5 = peg$currPos;
        s6 = peg$parse_();
        s7 = peg$parseSELECTORS();
        if (s7 !== peg$FAILED) {
          s8 = peg$parse_();
          s5 = s7;
        } else {
          peg$currPos = s5;
          s5 = peg$FAILED;
        }
      }
      if (s5 !== peg$FAILED) {
        while (s5 !== peg$FAILED) {
          s4.push(s5);
          s5 = peg$currPos;
          s6 = peg$parse_();
          s7 = peg$parseDELIMITER();
          if (s7 !== peg$FAILED) {
            s8 = peg$parse_();
            s9 = peg$parseSELECTORS();
            if (s9 !== peg$FAILED) {
              s10 = peg$parse_();
              peg$savedPos = s5;
              s5 = peg$f11(s2, s7, s9);
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
          } else {
            peg$currPos = s5;
            s5 = peg$FAILED;
          }
          if (s5 === peg$FAILED) {
            s5 = peg$currPos;
            s6 = peg$parse_();
            s7 = peg$parseSELECTORS();
            if (s7 !== peg$FAILED) {
              s8 = peg$parse_();
              s5 = s7;
            } else {
              peg$currPos = s5;
              s5 = peg$FAILED;
            }
          }
        }
      } else {
        s4 = peg$FAILED;
      }
      if (s4 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f12(s2, s4);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseSELECTORS() {
    var s0;

    s0 = peg$parseSELECTOR_SIMPLE_INDEX();
    if (s0 === peg$FAILED) {
      s0 = peg$parseSELECTOR_WITH_STARTINDEX();
      if (s0 === peg$FAILED) {
        s0 = peg$parseSELECTOR_WITH_ENDINDEX();
        if (s0 === peg$FAILED) {
          s0 = peg$parseSELECTOR_WITH_START_AND_ENDINDEX();
          if (s0 === peg$FAILED) {
            s0 = peg$parseSELECTOR_WITH_LISTINDEX();
            if (s0 === peg$FAILED) {
              s0 = peg$parseSELECTOR_WITH_WILDCARD();
              if (s0 === peg$FAILED) {
                s0 = peg$parseSELECTOR_SIMPLE();
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parseSELECTOR_SIMPLE() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = peg$parseTOKEN();
    if (s2 !== peg$FAILED) {
      s1 = input.substring(s1, peg$currPos);
    } else {
      s1 = s2;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f13(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseSELECTOR_SIMPLE_INDEX() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = peg$parseTOKEN();
    if (s2 === peg$FAILED) {
      s2 = null;
    }
    s1 = input.substring(s1, peg$currPos);
    s2 = peg$parse_();
    if (input.charCodeAt(peg$currPos) === 91) {
      s3 = peg$c8;
      peg$currPos++;
    } else {
      s3 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e8); }
    }
    if (s3 !== peg$FAILED) {
      s4 = peg$parse_();
      s5 = peg$currPos;
      s6 = peg$parseINDEXTOKEN();
      if (s6 !== peg$FAILED) {
        s5 = input.substring(s5, peg$currPos);
      } else {
        s5 = s6;
      }
      if (s5 !== peg$FAILED) {
        s6 = peg$parse_();
        if (input.charCodeAt(peg$currPos) === 93) {
          s7 = peg$c9;
          peg$currPos++;
        } else {
          s7 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e9); }
        }
        if (s7 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f14(s1, s5);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseSELECTOR_WITH_LISTINDEX() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = peg$parseTOKEN();
    if (s2 === peg$FAILED) {
      s2 = null;
    }
    s1 = input.substring(s1, peg$currPos);
    s2 = peg$parse_();
    if (input.charCodeAt(peg$currPos) === 91) {
      s3 = peg$c8;
      peg$currPos++;
    } else {
      s3 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e8); }
    }
    if (s3 !== peg$FAILED) {
      s4 = peg$parse_();
      s5 = [];
      s6 = peg$currPos;
      s7 = peg$parseINDEXTOKEN();
      if (s7 !== peg$FAILED) {
        s6 = input.substring(s6, peg$currPos);
      } else {
        s6 = s7;
      }
      while (s6 !== peg$FAILED) {
        s5.push(s6);
        s6 = peg$currPos;
        s7 = peg$currPos;
        s8 = peg$parse_();
        if (input.charCodeAt(peg$currPos) === 44) {
          s9 = peg$c10;
          peg$currPos++;
        } else {
          s9 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e10); }
        }
        if (s9 !== peg$FAILED) {
          s10 = peg$parse_();
          s8 = [s8, s9, s10];
          s7 = s8;
        } else {
          peg$currPos = s7;
          s7 = peg$FAILED;
        }
        if (s7 !== peg$FAILED) {
          s7 = peg$currPos;
          s8 = peg$parseINDEXTOKEN();
          if (s8 !== peg$FAILED) {
            s7 = input.substring(s7, peg$currPos);
          } else {
            s7 = s8;
          }
          if (s7 === peg$FAILED) {
            peg$currPos = s6;
            s6 = peg$FAILED;
          } else {
            s6 = s7;
          }
        } else {
          s6 = s7;
        }
      }
      s6 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 93) {
        s7 = peg$c9;
        peg$currPos++;
      } else {
        s7 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e9); }
      }
      if (s7 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f15(s1, s5);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseSELECTOR_WITH_STARTINDEX() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = peg$parseTOKEN();
    if (s2 === peg$FAILED) {
      s2 = null;
    }
    s1 = input.substring(s1, peg$currPos);
    s2 = peg$parse_();
    if (input.charCodeAt(peg$currPos) === 91) {
      s3 = peg$c8;
      peg$currPos++;
    } else {
      s3 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e8); }
    }
    if (s3 !== peg$FAILED) {
      s4 = peg$parse_();
      s5 = peg$currPos;
      s6 = peg$parseINDEXTOKEN();
      if (s6 !== peg$FAILED) {
        s5 = input.substring(s5, peg$currPos);
      } else {
        s5 = s6;
      }
      if (s5 !== peg$FAILED) {
        s6 = peg$parse_();
        if (input.charCodeAt(peg$currPos) === 58) {
          s7 = peg$c4;
          peg$currPos++;
        } else {
          s7 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e4); }
        }
        if (s7 !== peg$FAILED) {
          s8 = peg$parse_();
          if (input.charCodeAt(peg$currPos) === 93) {
            s9 = peg$c9;
            peg$currPos++;
          } else {
            s9 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e9); }
          }
          if (s9 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f16(s1, s5);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseSELECTOR_WITH_ENDINDEX() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12;

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = peg$parseTOKEN();
    if (s2 === peg$FAILED) {
      s2 = null;
    }
    s1 = input.substring(s1, peg$currPos);
    s2 = peg$parse_();
    if (input.charCodeAt(peg$currPos) === 91) {
      s3 = peg$c8;
      peg$currPos++;
    } else {
      s3 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e8); }
    }
    if (s3 !== peg$FAILED) {
      s4 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 58) {
        s5 = peg$c4;
        peg$currPos++;
      } else {
        s5 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e4); }
      }
      if (s5 !== peg$FAILED) {
        s6 = peg$parse_();
        s7 = peg$currPos;
        s8 = peg$currPos;
        if (input.charCodeAt(peg$currPos) === 45) {
          s9 = peg$c11;
          peg$currPos++;
        } else {
          s9 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e11); }
        }
        if (s9 === peg$FAILED) {
          s9 = null;
        }
        s10 = peg$parse_();
        s11 = peg$currPos;
        s12 = peg$parseINDEXTOKEN();
        if (s12 !== peg$FAILED) {
          s11 = input.substring(s11, peg$currPos);
        } else {
          s11 = s12;
        }
        if (s11 !== peg$FAILED) {
          s9 = [s9, s10, s11];
          s8 = s9;
        } else {
          peg$currPos = s8;
          s8 = peg$FAILED;
        }
        if (s8 !== peg$FAILED) {
          s7 = input.substring(s7, peg$currPos);
        } else {
          s7 = s8;
        }
        if (s7 !== peg$FAILED) {
          s8 = peg$parse_();
          if (input.charCodeAt(peg$currPos) === 93) {
            s9 = peg$c9;
            peg$currPos++;
          } else {
            s9 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e9); }
          }
          if (s9 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f17(s1, s7);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseSELECTOR_WITH_START_AND_ENDINDEX() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14;

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = peg$parseTOKEN();
    if (s2 === peg$FAILED) {
      s2 = null;
    }
    s1 = input.substring(s1, peg$currPos);
    s2 = peg$parse_();
    if (input.charCodeAt(peg$currPos) === 91) {
      s3 = peg$c8;
      peg$currPos++;
    } else {
      s3 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e8); }
    }
    if (s3 !== peg$FAILED) {
      s4 = peg$parse_();
      s5 = peg$currPos;
      s6 = peg$parseINDEXTOKEN();
      if (s6 !== peg$FAILED) {
        s5 = input.substring(s5, peg$currPos);
      } else {
        s5 = s6;
      }
      if (s5 !== peg$FAILED) {
        s6 = peg$parse_();
        if (input.charCodeAt(peg$currPos) === 58) {
          s7 = peg$c4;
          peg$currPos++;
        } else {
          s7 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e4); }
        }
        if (s7 !== peg$FAILED) {
          s8 = peg$parse_();
          s9 = peg$currPos;
          s10 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 45) {
            s11 = peg$c11;
            peg$currPos++;
          } else {
            s11 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e11); }
          }
          if (s11 === peg$FAILED) {
            s11 = null;
          }
          s12 = peg$parse_();
          s13 = peg$currPos;
          s14 = peg$parseINDEXTOKEN();
          if (s14 !== peg$FAILED) {
            s13 = input.substring(s13, peg$currPos);
          } else {
            s13 = s14;
          }
          if (s13 !== peg$FAILED) {
            s11 = [s11, s12, s13];
            s10 = s11;
          } else {
            peg$currPos = s10;
            s10 = peg$FAILED;
          }
          if (s10 !== peg$FAILED) {
            s9 = input.substring(s9, peg$currPos);
          } else {
            s9 = s10;
          }
          if (s9 !== peg$FAILED) {
            s10 = peg$parse_();
            if (input.charCodeAt(peg$currPos) === 93) {
              s11 = peg$c9;
              peg$currPos++;
            } else {
              s11 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e9); }
            }
            if (s11 !== peg$FAILED) {
              peg$savedPos = s0;
              s0 = peg$f18(s1, s5, s9);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseSELECTOR_WITH_WILDCARD() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = peg$parseTOKEN();
    if (s2 === peg$FAILED) {
      s2 = null;
    }
    s1 = input.substring(s1, peg$currPos);
    s2 = peg$parse_();
    if (input.charCodeAt(peg$currPos) === 91) {
      s3 = peg$c8;
      peg$currPos++;
    } else {
      s3 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e8); }
    }
    if (s3 !== peg$FAILED) {
      s4 = peg$parse_();
      if (input.charCodeAt(peg$currPos) === 42) {
        s5 = peg$c12;
        peg$currPos++;
      } else {
        s5 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e12); }
      }
      if (s5 !== peg$FAILED) {
        s6 = peg$parse_();
        if (input.charCodeAt(peg$currPos) === 93) {
          s7 = peg$c9;
          peg$currPos++;
        } else {
          s7 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e9); }
        }
        if (s7 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f19(s1);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseINDEXTOKEN() {
    var s0, s1;

    s0 = [];
    if (peg$r0.test(input.charAt(peg$currPos))) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e13); }
    }
    if (s1 !== peg$FAILED) {
      while (s1 !== peg$FAILED) {
        s0.push(s1);
        if (peg$r0.test(input.charAt(peg$currPos))) {
          s1 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e13); }
        }
      }
    } else {
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseDEFAULTVALUE() {
    var s0, s1;

    s0 = [];
    if (peg$r1.test(input.charAt(peg$currPos))) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e14); }
    }
    if (s1 !== peg$FAILED) {
      while (s1 !== peg$FAILED) {
        s0.push(s1);
        if (peg$r1.test(input.charAt(peg$currPos))) {
          s1 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e14); }
        }
      }
    } else {
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseSCOPETOKEN() {
    var s0;

    if (peg$r2.test(input.charAt(peg$currPos))) {
      s0 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e15); }
    }

    return s0;
  }

  function peg$parse_() {
    var s0, s1;

    s0 = [];
    if (peg$r3.test(input.charAt(peg$currPos))) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e16); }
    }
    while (s1 !== peg$FAILED) {
      s0.push(s1);
      if (peg$r3.test(input.charAt(peg$currPos))) {
        s1 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e16); }
      }
    }

    return s0;
  }

  function peg$parseDELIMITER() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 46) {
      s1 = peg$c13;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e17); }
    }
    if (s1 === peg$FAILED) {
      if (input.substr(peg$currPos, 2) === peg$c14) {
        s1 = peg$c14;
        peg$currPos += 2;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e18); }
      }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f20(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parsePARAMETER() {
    var s0, s1;

    s0 = peg$parseSTRING();
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseTOKEN();
      if (s1 !== peg$FAILED) {
        s0 = input.substring(s0, peg$currPos);
      } else {
        s0 = s1;
      }
    }

    return s0;
  }

  function peg$parseSTRING() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 34) {
      s1 = peg$c15;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e19); }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parseDoubleStringCharacter();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parseDoubleStringCharacter();
      }
      if (input.charCodeAt(peg$currPos) === 34) {
        s3 = peg$c15;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e19); }
      }
      if (s3 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f21(s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 39) {
        s1 = peg$c16;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e20); }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        s3 = peg$parseSingleStringCharacter();
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parseSingleStringCharacter();
        }
        if (input.charCodeAt(peg$currPos) === 39) {
          s3 = peg$c16;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e20); }
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f22(s2);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseDoubleStringCharacter() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$currPos;
    peg$silentFails++;
    if (input.charCodeAt(peg$currPos) === 34) {
      s2 = peg$c15;
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e19); }
    }
    if (s2 === peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 92) {
        s2 = peg$c17;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e21); }
      }
    }
    peg$silentFails--;
    if (s2 === peg$FAILED) {
      s1 = undefined;
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      if (input.length > peg$currPos) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e22); }
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f23(s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 92) {
        s1 = peg$c17;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e21); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseEscapeSequence();
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f24(s2);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseSingleStringCharacter() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$currPos;
    peg$silentFails++;
    if (input.charCodeAt(peg$currPos) === 39) {
      s2 = peg$c16;
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e20); }
    }
    if (s2 === peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 92) {
        s2 = peg$c17;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e21); }
      }
    }
    peg$silentFails--;
    if (s2 === peg$FAILED) {
      s1 = undefined;
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      if (input.length > peg$currPos) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e22); }
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f25(s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 92) {
        s1 = peg$c17;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e21); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseEscapeSequence();
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f26(s2);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseEscapeSequence() {
    var s0, s1;

    if (input.charCodeAt(peg$currPos) === 39) {
      s0 = peg$c16;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e20); }
    }
    if (s0 === peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 34) {
        s0 = peg$c15;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e19); }
      }
      if (s0 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 92) {
          s0 = peg$c17;
          peg$currPos++;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e21); }
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 1) {
            s1 = peg$c18;
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e23); }
          }
          if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$f27();
          }
          s0 = s1;
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            if (input.charCodeAt(peg$currPos) === 2) {
              s1 = peg$c19;
              peg$currPos++;
            } else {
              s1 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e24); }
            }
            if (s1 !== peg$FAILED) {
              peg$savedPos = s0;
              s1 = peg$f28();
            }
            s0 = s1;
            if (s0 === peg$FAILED) {
              s0 = peg$currPos;
              if (input.charCodeAt(peg$currPos) === 98) {
                s1 = peg$c20;
                peg$currPos++;
              } else {
                s1 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e25); }
              }
              if (s1 !== peg$FAILED) {
                peg$savedPos = s0;
                s1 = peg$f29();
              }
              s0 = s1;
              if (s0 === peg$FAILED) {
                s0 = peg$currPos;
                if (input.charCodeAt(peg$currPos) === 102) {
                  s1 = peg$c21;
                  peg$currPos++;
                } else {
                  s1 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e26); }
                }
                if (s1 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s1 = peg$f30();
                }
                s0 = s1;
                if (s0 === peg$FAILED) {
                  s0 = peg$currPos;
                  if (input.charCodeAt(peg$currPos) === 110) {
                    s1 = peg$c22;
                    peg$currPos++;
                  } else {
                    s1 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e27); }
                  }
                  if (s1 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s1 = peg$f31();
                  }
                  s0 = s1;
                  if (s0 === peg$FAILED) {
                    s0 = peg$currPos;
                    if (input.charCodeAt(peg$currPos) === 114) {
                      s1 = peg$c23;
                      peg$currPos++;
                    } else {
                      s1 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$e28); }
                    }
                    if (s1 !== peg$FAILED) {
                      peg$savedPos = s0;
                      s1 = peg$f32();
                    }
                    s0 = s1;
                    if (s0 === peg$FAILED) {
                      s0 = peg$currPos;
                      if (input.charCodeAt(peg$currPos) === 116) {
                        s1 = peg$c24;
                        peg$currPos++;
                      } else {
                        s1 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$e29); }
                      }
                      if (s1 !== peg$FAILED) {
                        peg$savedPos = s0;
                        s1 = peg$f33();
                      }
                      s0 = s1;
                      if (s0 === peg$FAILED) {
                        s0 = peg$currPos;
                        if (input.charCodeAt(peg$currPos) === 118) {
                          s1 = peg$c25;
                          peg$currPos++;
                        } else {
                          s1 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$e30); }
                        }
                        if (s1 !== peg$FAILED) {
                          peg$savedPos = s0;
                          s1 = peg$f34();
                        }
                        s0 = s1;
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parseTOKEN() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (peg$r4.test(input.charAt(peg$currPos))) {
      s1 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e31); }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      if (peg$r5.test(input.charAt(peg$currPos))) {
        s3 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e32); }
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        if (peg$r5.test(input.charAt(peg$currPos))) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e32); }
        }
      }
      s1 = [s1, s2];
      s0 = s1;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  peg$result = peg$startRuleFunction();

  if (peg$result !== peg$FAILED && peg$currPos === input.length) {
    return peg$result;
  } else {
    if (peg$result !== peg$FAILED && peg$currPos < input.length) {
      peg$fail(peg$endExpectation());
    }

    throw peg$buildStructuredError(
      peg$maxFailExpected,
      peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
      peg$maxFailPos < input.length
        ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
        : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
    );
  }
}

module.exports = {
  SyntaxError: peg$SyntaxError,
  parse: peg$parse
};
